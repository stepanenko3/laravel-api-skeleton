<?php

namespace {{ namespace }};

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Stepanenko3\LaravelApiSkeleton\Database\Eloquent\Model;
use Illuminate\Contracts\Database\Eloquent\Builder as EloquentBuilderContract;
use Illuminate\Contracts\Database\Query\Builder as QueryBuilderContract;
use Stepanenko3\LaravelApiSkeleton\Database\Eloquent\Builder;

class {{ class }} extends Model
{
    use HasFactory;

    protected $fillable = [
        //
    ];

    protected $casts = [
        //
    ];

    public function scopeApplyOrder(
        EloquentBuilderContract | QueryBuilderContract | Builder $builder,
        string $orderBy,
    ): Builder {
        return $builder->when(
            $orderBy,
            fn (EloquentBuilderContract | QueryBuilderContract | Builder $query) => match ($orderBy) {
                'oldest' => $query->orderBy($this->qualifyColumn('id')),
                default => $query->orderByDesc($this->qualifyColumn('id')),
            },
            fn ($query) => $query
                ->orderBy($this->qualifyColumn('id')),
        );
    }

    protected static function booted(): void
    {
        static::saving(function (self $item): void {
            //
        });
    }
}
